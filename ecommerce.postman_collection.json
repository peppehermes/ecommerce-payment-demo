{
	"info": {
		"_postman_id": "cd079cef-8d81-4f1b-919e-7c0aea77d47d",
		"name": "cleafy-ecommerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37268112"
	},
	"item": [
		{
			"name": "createPayment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('timestamp');",
							"    pm.expect(responseData).to.have.property('senderId');",
							"    pm.expect(responseData).to.have.property('receiverId');",
							"    pm.expect(responseData).to.have.property('amount');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}[+-]\\d{2}:\\d{2}$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"SenderId and receiverId are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.senderId).to.be.a('number').and.to.be.at.least(0, \"SenderId should be a non-negative integer\");",
							"  pm.expect(responseData.receiverId).to.be.a('number').and.to.be.at.least(0, \"ReceiverId should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Amount is a non-negative number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.amount).to.be.a('number');",
							"  pm.expect(responseData.amount).to.be.at.least(0, \"Amount should be a non-negative number\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"senderId\": 10,\r\n    \"receiverId\": 20,\r\n    \"amount\": 25\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/v1/payments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "createPaymentSameSenderReceiver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"senderId\": 10,\r\n    \"receiverId\": 10,\r\n    \"amount\": 25\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/v1/payments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllPayments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, timestamp, senderId, receiverId, and amount\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment).to.have.property('id');",
							"        pm.expect(payment).to.have.property('timestamp');",
							"        pm.expect(payment).to.have.property('senderId');",
							"        pm.expect(payment).to.have.property('receiverId');",
							"        pm.expect(payment).to.have.property('amount');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}[+-]\\d{2}:\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"SenderId and ReceiverId are positive integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment.senderId).to.be.a('number').and.to.be.above(0);",
							"        pm.expect(payment.receiverId).to.be.a('number').and.to.be.above(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Amount is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment.amount).to.be.a('number');",
							"        pm.expect(payment.amount).to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/v1/payments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "getPaymentById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('timestamp');",
							"    pm.expect(responseData).to.have.property('senderId');",
							"    pm.expect(responseData).to.have.property('receiverId');",
							"    pm.expect(responseData).to.have.property('amount');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}[+-]\\d{2}:\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"SenderId and receiverId are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.senderId).to.be.a('number').and.to.satisfy((value) => value >= 0, \"SenderId should be a non-negative integer\");",
							"    pm.expect(responseData.receiverId).to.be.a('number').and.to.satisfy((value) => value >= 0, \"ReceiverId should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Amount should be a non-negative number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.amount).to.be.a('number');",
							"  pm.expect(responseData.amount).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/v1/payments/:id",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1",
							"description": "get payment with id = 1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getPaymentByIdNotFound",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/v1/payments/:id",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "100",
							"description": "get payment with id = 1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getPaymentsBySenderId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, timestamp, senderId, receiverId, and amount\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment).to.have.property('id');",
							"        pm.expect(payment).to.have.property('timestamp');",
							"        pm.expect(payment).to.have.property('senderId');",
							"        pm.expect(payment).to.have.property('receiverId');",
							"        pm.expect(payment).to.have.property('amount');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}[+-]\\d{2}:\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"SenderId and receiverId are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(payment) {",
							"    pm.expect(payment.senderId).to.be.a('number').and.to.satisfy((val) => val >= 0, 'SenderId should be a non-negative integer');",
							"    pm.expect(payment.receiverId).to.be.a('number').and.to.satisfy((val) => val >= 0, 'ReceiverId should be a non-negative integer');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Amount should be a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  responseData.forEach(function(payment) {",
							"    pm.expect(payment.amount).to.be.a('number');",
							"    pm.expect(payment.amount).to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/v1/payments/sender/:senderId",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments",
						"sender",
						":senderId"
					],
					"variable": [
						{
							"key": "senderId",
							"value": "10",
							"description": "get payments with senderId = 10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getPaymentsByReceiverId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment).to.have.property('id');",
							"        pm.expect(payment).to.have.property('timestamp');",
							"        pm.expect(payment).to.have.property('senderId');",
							"        pm.expect(payment).to.have.property('receiverId');",
							"        pm.expect(payment).to.have.property('amount');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(payment) {",
							"        pm.expect(payment.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}[+-]\\d{2}:\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Id, senderId, and receiverId are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(payment) {",
							"    pm.expect(payment.id).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(payment.senderId).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(payment.receiverId).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/v1/payments/receiver/:receiverId",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments",
						"receiver",
						":receiverId"
					],
					"variable": [
						{
							"key": "receiverId",
							"value": "20",
							"description": "get payments with receiverId = 20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getSuspiciousAccounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/v1/payments/suspicious",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"payments",
						"suspicious"
					]
				}
			},
			"response": []
		}
	]
}